def leaseMod := /.at.lang.leasedrefs;
import /.at.lang.futures;
import /.at.lang.totam;

def log(text) {
  Android.Log.i("weKittens", "\n\n#####\n"+ text + "\n#####");
};

deftype remotePlayer;

def makeWeKittens() {

  def otherPlayers := [];// stores remote players.
  def playerName := "EMPTY PLAYER NAME";
  def playerId;

  def game; // current game state
  def tuples; // tuple space, useful to keep track of cards played during the game
  def currentRound;

  def gui;

  //interface for android gui.
  def localInterface := object: {
    def ping(newgui){
        log("GUI HAS ARRIVED");
        gui := newgui;
    };

    def addNewPlayer(name){
        log("NEW PLAYER HAS ARRIVED "+name);
        playerName := name;
        goOnline();
    };

    def getPlayerName(){
        playerName;
    };

    def startGame(){
        playerId := 0;
        currentRound := -1;
        game := jlobby.edu.vub.at.wekittens.GameLogic.new(playerId, otherPlayers.length+1);
        def deck := game.getDeckList();
        def playersCards := game.getPlayersCards();
        def playersStates := game.getPlayersStates();
        def nbPlayers := game.getNbPlayers();
        // start the tuple space if game starter
        tuples := makeTupleSpace();
        def otherPlayerId := 0;
        otherPlayers.each:{ |player|
            otherPlayerId := otherPlayerId + 1;
            player<-startGame(otherPlayerId, deck, playersCards, playersStates, nbPlayers); // send needed information to players
        };
        tuples.goOnline(); // tuples go online
        waitForTuples();
    };

    def sendTuple(cardId, from, to, currentRound, deck){
        def t := tuple: ["Message", cardId, from, to, currentRound, deck];
        log(t);
        tuples.inject: t; // inject public tuple
    };
  };

    // wait for tuples to be received
  def waitForTuples(){
        def tu := tuple: ["Message", var: `cardId, var: `from, var: `to, var: `round, var: `deck];
        def waitForIncomings := tuples.whenever: tu read:{ // non blocking reading
            log("currentRound: "+currentRound);
            log("round: "+round);
            if: ((from != playerId)) then: { // do nothing if we read our own tuple and
                if: (round != currentRound) then: { //we do not read an old tuple
                    currentRound := round;
                    gui.handleTuple(cardId, from, to, round, deck);
                };
            } else:{
                currentRound := round;
            };
        };
        waitForIncomings;
  };

  //interface for remote painters.
  def remoteInterface := object: {

    def getPlayerName(){
        playerName;
    };

    def startGame(id,deck,playersCards,playerStates,nbPlayers){
        tuples := makeTupleSpace();
        tuples.goOnline();
        playerId := id;
        currentRound := -1;
        gui.startGameAT(id,deck,playersCards,playerStates,nbPlayers);
        waitForTuples();
    };

    def getTuple(cardId, from, to){

    };

  }; //end-remoteInterface


  def goOnline() {
  	// setup peer-to-peer service discovery
  	log("Going online, waiting for new players to connect");

  	whenever: remotePlayer discovered: { |player| //when a new player is discovered
  	    if: !otherPlayers.contains(player) then: { //if new player
  	        log("New player found: " + player);
  	        otherPlayers := otherPlayers + [player];
            when: player<-getPlayerName()@FutureMessage becomes:{|name| //wait to retrieve player's name
                gui.foundNewPlayer(name);
            }
  	    };
  	};
  	export: remoteInterface as: remotePlayer; //export ATInterface object
  };

  network.online();
  log("Hallo Android!!"); //?
  //jlobby.edu.vub.at.wekittens.GameLogic.test();

  // example symbiosis
  //Android.parent.topExplosionAnimation();

  gui := Android.parent.registerATApp(localInterface); //import gui for modifications
};

//network.online;
self;